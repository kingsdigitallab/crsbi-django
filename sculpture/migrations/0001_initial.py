# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-01-09 23:38
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import iipimage.fields
import iipimage.storage
import mezzanine.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BibliographyItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', mezzanine.core.fields.RichTextField(help_text='Eg: N. Pevsner, The Buildings of England: Herefordshire, Harmondsworth, 1963, 78')),
                ('sort_under', models.CharField(blank=True, help_text='Text used for sorting this entry; eg: Pevsner, N.', max_length=32)),
            ],
            options={
                'ordering': ['sort_under', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'verbose_name_plural': 'countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Dedication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Detail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('title', models.CharField(max_length=200)),
                ('text', mezzanine.core.fields.RichTextField(blank=True)),
                ('order', models.IntegerField(default=2)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('dimension_type', models.CharField(max_length=150)),
                ('value', models.CharField(max_length=150)),
                ('section', models.CharField(blank=True, max_length=150)),
                ('order', models.IntegerField(default=2)),
            ],
            options={
                'ordering': ['dimension_type', 'feature', 'section', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Diocese',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExternalSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('url', models.URLField(verbose_name='URL')),
                ('title', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=100)),
                ('description', mezzanine.core.fields.RichTextField(blank=True)),
                ('order', models.IntegerField(editable=False)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeatureImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('image', iipimage.fields.ImageField(height_field='height', help_text='Accepts RAW, TIFF and JPEG files', storage=iipimage.storage.ImageStorage(base_url='http://crsbi2-images.cch.kcl.ac.uk/iip/iipsrv.fcgi', location='/vol/crsbi/images/'), upload_to=iipimage.storage.get_image_path, width_field='width')),
                ('caption', models.CharField(blank=True, max_length=256)),
                ('description', models.TextField(blank=True)),
                ('source_format', models.CharField(blank=True, choices=[('analogue', 'Analogue'), ('digital', 'Digital')], max_length=12)),
                ('upload_file_format', models.CharField(blank=True, max_length=10)),
                ('upload_filename', models.CharField(blank=True, max_length=128)),
                ('resolution', models.IntegerField(blank=True, help_text='Pixels per inch.', null=True)),
                ('width', models.IntegerField(help_text='Width in pixels.')),
                ('height', models.IntegerField(help_text='Height in pixels.')),
                ('bit_depth', models.CharField(blank=True, max_length=12)),
                ('colour_mode', models.CharField(blank=True, max_length=12)),
                ('camera_details', models.CharField(blank=True, max_length=256)),
                ('photo_date', models.CharField(blank=True, help_text='Date the photo was taken (eg: 01 Jan 2013).', max_length=32)),
                ('editing_software', models.CharField(blank=True, max_length=128)),
                ('editing_notes', models.TextField(blank=True)),
                ('order', models.IntegerField(default=2)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='sculpture.Feature')),
                ('photographer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sculpture_featureimage_images', to='sculpture.Contributor')),
            ],
            options={
                'abstract': False,
                'ordering': ['feature__site', 'feature', 'order'],
            },
        ),
        migrations.CreateModel(
            name='FeatureSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('order', models.IntegerField()),
                ('name', models.CharField(max_length=64)),
                ('n', models.CharField(max_length=5, verbose_name='label')),
                ('feature_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='sculpture.FeatureSet')),
            ],
            options={
                'ordering': ['feature_set__name', 'order'],
            },
        ),
        migrations.CreateModel(
            name='GlossaryTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', mezzanine.core.fields.RichTextField()),
                ('image', iipimage.fields.ImageField(blank=True, null=True, storage=iipimage.storage.ImageStorage(base_url='http://crsbi2-images.cch.kcl.ac.uk/iip/iipsrv.fcgi', location='/vol/crsbi/images/'), upload_to=iipimage.storage.get_image_path)),
                ('broader_term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='narrower_terms', to='sculpture.GlossaryTerm')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GlossaryTermName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('display', models.BooleanField(default=True, help_text='Whether to list this name as a synonym')),
                ('glossary_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='sculpture.GlossaryTerm')),
            ],
            options={
                'verbose_name': 'glossary term synonym',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ImageStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='Changes to this value will require code changes also.', max_length=32, unique=True)),
            ],
            options={
                'verbose_name_plural': 'image statuses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='Changes to this value will require code changes also.', max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RegionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='Changes to this value may require code changes also.', max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Settlement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'types of building / monument',
                'verbose_name': 'type of building / monument',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('site_id', models.CharField(blank=True, max_length=16)),
                ('visit_date', models.CharField(blank=True, help_text='Eg: 01 Jan 2013', max_length=216, verbose_name='visit date(s)')),
                ('name', models.CharField(max_length=256)),
                ('grid_reference', models.CharField(blank=True, help_text='E.g. SO 123 321 or N 31 22', max_length=25, verbose_name='national grid reference')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('description', mezzanine.core.fields.RichTextField(blank=True)),
                ('history', mezzanine.core.fields.RichTextField(blank=True)),
                ('comments', mezzanine.core.fields.RichTextField(blank=True)),
                ('fieldworker_notes', models.TextField(blank=True, help_text='Admin use only; not published. Please add date and initials to all comments.')),
                ('editor_notes', models.TextField(blank=True, help_text='Admin use only; not published. Please add date and initials to all comments.')),
                ('authors', models.ManyToManyField(blank=True, null=True, related_name='sites', to='sculpture.Contributor')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Country')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SiteComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('comment', models.TextField()),
                ('site', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='sculpture.Site')),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.CreateModel(
            name='SiteDedication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('date', models.CharField(blank=True, max_length=32)),
                ('certain', models.BooleanField(default=True)),
                ('dedication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Dedication')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Period')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Site')),
            ],
        ),
        migrations.CreateModel(
            name='SiteDiocese',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('diocese', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Diocese')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Period')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Site')),
            ],
        ),
        migrations.CreateModel(
            name='SiteImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('image', iipimage.fields.ImageField(height_field='height', help_text='Accepts RAW, TIFF and JPEG files', storage=iipimage.storage.ImageStorage(base_url='http://crsbi2-images.cch.kcl.ac.uk/iip/iipsrv.fcgi', location='/vol/crsbi/images/'), upload_to=iipimage.storage.get_image_path, width_field='width')),
                ('caption', models.CharField(blank=True, max_length=256)),
                ('description', models.TextField(blank=True)),
                ('source_format', models.CharField(blank=True, choices=[('analogue', 'Analogue'), ('digital', 'Digital')], max_length=12)),
                ('upload_file_format', models.CharField(blank=True, max_length=10)),
                ('upload_filename', models.CharField(blank=True, max_length=128)),
                ('resolution', models.IntegerField(blank=True, help_text='Pixels per inch.', null=True)),
                ('width', models.IntegerField(help_text='Width in pixels.')),
                ('height', models.IntegerField(help_text='Height in pixels.')),
                ('bit_depth', models.CharField(blank=True, max_length=12)),
                ('colour_mode', models.CharField(blank=True, max_length=12)),
                ('camera_details', models.CharField(blank=True, max_length=256)),
                ('photo_date', models.CharField(blank=True, help_text='Date the photo was taken (eg: 01 Jan 2013).', max_length=32)),
                ('editing_software', models.CharField(blank=True, max_length=128)),
                ('editing_notes', models.TextField(blank=True)),
                ('order', models.IntegerField(default=2)),
                ('photographer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sculpture_siteimage_images', to='sculpture.Contributor')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='sculpture.Site')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sculpture_siteimage_images', to='sculpture.ImageStatus')),
            ],
            options={
                'abstract': False,
                'ordering': ['site', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SiteRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('date', models.CharField(blank=True, max_length=32)),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Period')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Region')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Site')),
            ],
        ),
        migrations.CreateModel(
            name='SiteStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='Changes to this value will require code changes also.', max_length=32, unique=True)),
            ],
            options={
                'verbose_name_plural': 'site statuses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SiteTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('tag', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('sites', models.ManyToManyField(editable=False, related_name='tags', to='sculpture.Site')),
            ],
            options={
                'ordering': ['tag'],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('page', models.CharField(max_length=255)),
                ('feedback', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'user feedback',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__first_name', 'user__last_name', 'user__username'],
            },
        ),
        migrations.AddField(
            model_name='sitetag',
            name='user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='sculpture.UserProfile'),
        ),
        migrations.AddField(
            model_name='sitecomment',
            name='user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='sculpture.UserProfile'),
        ),
        migrations.AddField(
            model_name='site',
            name='dedications',
            field=models.ManyToManyField(blank=True, null=True, related_name='sites', through='sculpture.SiteDedication', to='sculpture.Dedication'),
        ),
        migrations.AddField(
            model_name='site',
            name='dioceses',
            field=models.ManyToManyField(blank=True, null=True, related_name='sites', through='sculpture.SiteDiocese', to='sculpture.Diocese'),
        ),
        migrations.AddField(
            model_name='site',
            name='glossary_terms',
            field=models.ManyToManyField(blank=True, editable=False, null=True, related_name='sites', to='sculpture.GlossaryTerm'),
        ),
        migrations.AddField(
            model_name='site',
            name='regions',
            field=models.ManyToManyField(blank=True, null=True, related_name='sites', through='sculpture.SiteRegion', to='sculpture.Region'),
        ),
        migrations.AddField(
            model_name='site',
            name='settlement',
            field=models.ForeignKey(blank=True, help_text='Type of building/monument', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='sculpture.Settlement'),
        ),
        migrations.AddField(
            model_name='site',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.SiteStatus'),
        ),
        migrations.AddField(
            model_name='region',
            name='region_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='sculpture.RegionType'),
        ),
        migrations.AddField(
            model_name='featureimage',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sculpture_featureimage_images', to='sculpture.ImageStatus'),
        ),
        migrations.AddField(
            model_name='feature',
            name='feature_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='sculpture.FeatureSet'),
        ),
        migrations.AddField(
            model_name='feature',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='sculpture.Site'),
        ),
        migrations.AddField(
            model_name='externalsite',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sculpture.Site'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='feature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dimensions', to='sculpture.Feature'),
        ),
        migrations.AddField(
            model_name='detail',
            name='feature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='sculpture.Feature'),
        ),
        migrations.AddField(
            model_name='contributor',
            name='user_profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contributor', to='sculpture.UserProfile'),
        ),
        migrations.AddField(
            model_name='bibliographyitem',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bibliography_items', to='sculpture.Site'),
        ),
        migrations.AlterUniqueTogether(
            name='sitetag',
            unique_together=set([('user', 'tag')]),
        ),
        migrations.AlterUniqueTogether(
            name='sitecomment',
            unique_together=set([('site', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='region',
            unique_together=set([('name', 'region_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='featureset',
            unique_together=set([('order', 'feature_set')]),
        ),
    ]
